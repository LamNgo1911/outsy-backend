generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  username       String   @unique
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  gender         String
  birthdate      DateTime
  bio            String?
  profilePicture String?
  location       String
  interests      String[]
  status         String   @default("active") // e.g., "active", "banned", "inactive"

  // Activity & Preferences
  onlineStatus Boolean  @default(false) // Whether the user is currently online
  preferences  Json // E.g., gender, age range, distance for matching
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  igUrl        String? // Instagram URL
  // Photo        Photo[]

  // Relationships
  chats  UserChat[]
  hostEvents Event[]
  // matches       Match[] // Matches with other users
  // likes         Like[] // Likes sent to other users
  // receivedLikes Like[] // Likes received from other users
}

model Chat {
  id       String  @id @default(cuid())
  isActive Boolean @default(true)
  // createdAt DateTime   @default(now())

  users    UserChat[]
  messages Message[]
}

model UserChat {
  userId String
  chatId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([userId, chatId]) // Composite primary key 
}

model Message {
  id       String   @id @default(cuid())
  chatId   String
  senderId String
  content  String
  sentAt   DateTime @default(now())
  isRead   Boolean  @default(false)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// model Matches {
//   id         Int       @id @default(autoincrement())
//   user1Id    Int
//   user2Id    Int
//   matchedAt  DateTime  @default(now())
//   isActive   Boolean   @default(true) // Whether the match is still active
//   user1      User      @relation(fields: [user1Id], references: [id])
//   user2      User      @relation(fields: [user2Id], references: [id])
// }

// model Likes {
//   id         Int      @id @default(autoincrement())
//   senderId   Int
//   receiverId Int
//   sentAt     DateTime @default(now())
//   sender     User     @relation(fields: [senderId], references: [id])
//   receiver   User     @relation(fields: [receiverId], references: [id])
// }

// model Photos {
//   id         Int      @id @default(autoincrement())
//   userId     Int
//   url        String
//   uploadedAt DateTime @default(now())
//   user       User     @relation(fields: [userId], references: [id])
// }

model Event {
  id      String   @id @default(cuid())
  hostId  String
  name    String
  date    DateTime
  guestId String
  venueId String
  status  Status   @default(OPEN)

  //relation
  host User @relation(fields: [hostId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])
}

enum Status {
  OPEN
  CLOSED
  CANCELLED
}

model Venue {
  id      String @id @default(cuid())
  name    String
  address String

  //relation
  events Event[]
}

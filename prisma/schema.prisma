generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String   @id
  username       String   @unique
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  gender         String // e.g., "Male", "Female", "Non-Binary"
  birthdate      DateTime
  bio            String? // Optional short bio
  profilePicture String? // URL of the profile picture
  location       String // Current location (e.g., city or coordinates)
  interests      String[] // Array of user interests or hobbies
  status         String   @default("active") // e.g., "active", "banned", "inactive"

  // Relationships
  // matches       Match[] // Matches with other users
  // likes         Like[] // Likes sent to other users
  // receivedLikes Like[] // Likes received from other users
  // Message[] // Messages sent/received

  // Activity & Preferences
  onlineStatus Boolean  @default(false) // Whether the user is currently online
  preferences  Json // E.g., gender, age range, distance for matching
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  igUrl        String? // Instagram URL
  // Photo        Photo[]
}

// model Matches {
//   id         Int       @id @default(autoincrement())
//   user1Id    Int
//   user2Id    Int
//   matchedAt  DateTime  @default(now())
//   isActive   Boolean   @default(true) // Whether the match is still active
//   user1      User      @relation(fields: [user1Id], references: [id])
//   user2      User      @relation(fields: [user2Id], references: [id])
// }

// model Likes {
//   id         Int      @id @default(autoincrement())
//   senderId   Int
//   receiverId Int
//   sentAt     DateTime @default(now())
//   sender     User     @relation(fields: [senderId], references: [id])
//   receiver   User     @relation(fields: [receiverId], references: [id])
// }

// model Messages {
//   id         Int       @id @default(autoincrement())
//   senderId   Int
//   receiverId Int
//   content    String
//   sentAt     DateTime  @default(now())
//   isRead     Boolean   @default(false)
//   sender     User      @relation(fields: [senderId], references: [id])
//   receiver   User      @relation(fields: [receiverId], references: [id])
// }

// model Photos {
//   id         Int      @id @default(autoincrement())
//   userId     Int
//   url        String
//   uploadedAt DateTime @default(now())
//   user       User     @relation(fields: [userId], references: [id])
// }
